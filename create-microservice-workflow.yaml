apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: create-microservice-automation-
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: service-name
      - name: owner-username
      - name: team
      - name: description
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
  templates:

    - name: main
      steps:
        - - name: validate-input
            template: validate-input
            arguments:
              parameters:
                - name: service-name
                  value: "{{workflow.parameters.service-name}}"
                - name: owner-username
                  value: "{{workflow.parameters.owner-username}}"
                - name: team
                  value: "{{workflow.parameters.team}}"
                - name: description
                  value: "{{workflow.parameters.description}}"

        - - name: template-checkout
            template: template-checkout
            arguments:
              parameters:
                - name: gh-repo
                  value: adriandantas/cookiecutter-quarkus-app
                - name: template-dir
                  value: /workspace/template

        - - name: microservice-scaffolding
            template: microservice-scaffolding
            arguments:
              parameters:
                - name: service-name
                  value: "{{workflow.parameters.service-name}}"
                - name: owner-username
                  value: "{{workflow.parameters.owner-username}}"
                - name: team
                  value: "{{workflow.parameters.team}}"
                - name: description
                  value: "{{workflow.parameters.description}}"
                - name: template-dir
                  value: /workspace/template

        - - name: create-repository
            template: create-repository
            arguments:
              parameters:
                - name: user-name
                  value: adriandantas
                - name: repo-name
                  value: "{{workflow.parameters.service-name}}"
                - name: workspace-dir
                  value: "/workspace"

    - name: validate-input
      inputs:
        parameters:
          - name: service-name
          - name: owner-username
          - name: team
          - name: description
      container:
        image: adriandantas/step_validator:1.0.3
        args: [
          "--service-name", "{{inputs.parameters.service-name}}",
          "--owner-username", "{{inputs.parameters.owner-username}}",
          "--team", "{{inputs.parameters.team}}",
          "--description", "{{inputs.parameters.description}}"
        ]
        volumeMounts:
          - name: workspace
            mountPath: /workspace
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: /workspace/result.json
            globalName: service-params

    - name: template-checkout
      inputs:
        parameters:
          - name: gh-repo
          - name: template-dir
      script:
        image: alpine/git
        command: [ "/bin/sh", "-c" ]
        env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-token
                key: token
          - name: GH_REPO
            value: "{{inputs.parameters.gh-repo}}"
          - name: TEMPLATE_DIR
            value: "{{inputs.parameters.template-dir}}"
        args:
          - >
            git clone --single-branch -b main https://x-access-token:$GIT_TOKEN@github.com/$GH_REPO.git $TEMPLATE_DIR;
            echo 'Repository cloned successfully';
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: microservice-scaffolding
      inputs:
        parameters:
          - name: service-name
          - name: owner-username
          - name: team
          - name: description
          - name: template-dir
      container:
        image: adriandantas/cookiecutter:2.3.0
        args: [
          "--no-input",
          "-o", "/workspace",
          "{{inputs.parameters.template-dir}}",
          "serviceName={{inputs.parameters.service-name}}",
          "ownerUsername={{inputs.parameters.owner-username}}",
          "team={{inputs.parameters.team}}",
          "description={{inputs.parameters.description}}"
        ]
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: create-repository
      inputs:
        parameters:
          - name: user-name
          - name: repo-name
          - name: workspace-dir
      script:
        image: debian:bullseye
        env:
          - name: USER_NAME
            value: "{{inputs.parameters.user-name}}"
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-token
                key: token
          - name: REPO_NAME
            value: "{{inputs.parameters.repo-name}}"
          - name: WORKSPACE_DIR
            value: "{{inputs.parameters.workspace-dir}}"
        command: [ bash ]
        volumeMounts:
          - name: workspace
            mountPath: /workspace
        source: |
          #!/bin/bash
          apt-get update && apt-get install -y git jq curl
          user_name="${USER_NAME}"
          git_token="${GIT_TOKEN}"
          repo_name="${REPO_NAME,,}"
          workspace_dir="${WORKSPACE_DIR}"
                             
          # Validate environment variables
          errors=""
          if [ -z "$user_name" ]; then
          errors+="USER_NAME is not set; "
          fi
          if [ -z "$git_token" ]; then
          errors+="GIT_TOKEN is not set; "
          fi
          if [ -z "$repo_name" ]; then
          errors+="REPO_NAME is not set; "
          fi
          if [ -z "$workspace_dir" ]; then
          errors+="WORKSPACE_DIR is not set; "
          fi
          
          if [ ! -z "$errors" ]; then
          echo "{'error':'validation error','message':'$errors'}"
          exit 1
          fi
          
          clone_url=""

          # Check if GitHub repository exists
          response=$(curl -s -u $user_name:$git_token \
          https://api.github.com/repos/$user_name/$repo_name)
          
          if [ "$(echo $response | jq -r '.message')" == "Not Found" ]; then
          # Create GitHub repository using API
          echo "Creating repository 'https://api.github.com/repos/$user_name/$repo_name' on GitHub"
          response=$(curl -s -u $user_name:$git_token \
          -X POST \
          -H "Content-Type: application/json" \
          -d "{\"name\": \"$repo_name\", \"private\": false}" \
          https://api.github.com/user/repos)
        
          if [ "$(echo $response | jq -r '.full_name')" != "$user_name/$repo_name" ]; then
          echo "{'error':'runtime error','message':'Failed to create repository on GitHub'}"
          exit 1
          fi
          echo "Repository created successfully"
          else
          clone_url=$(echo $response | jq -r '.clone_url')
          echo Repository \'$clone_url\' already exists
          fi
  
  
          # Get repository path
          repo_path="${workspace_dir}/${repo_name}"
          if [ ! -d "$repo_path" ]; then
          echo "{'error':'runtime error','message':'The directory \"$repo_path\" does not exist'}"
          exit 1
          fi
                  
          git config --global user.name "Adrian Dantas"
          git config --global user.email "adrian.dantas@gmail.com"
          
          # Initialize local repository
          git init "$repo_path"
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to init new repository'}"
            exit 1
          fi
          
          git -C "$repo_path" branch -m main
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to set main branch'}"
            exit 1
          fi
          
          git -C "$repo_path" add .
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to add files to commit'}"
            exit 1
          fi
          
          git -C "$repo_path" commit -m 'Initial commit.'
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to add files to commit'}"
            exit 1
          fi
          
          repo_url="https://$user_name:$git_token@github.com/$user_name/$repo_name.git"
          git -C "$repo_path" remote add origin "$repo_url"
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to set remote origin'}"
            exit 1
          fi
          
          # Upload local repository
          git -C "$repo_path" push origin main
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to push code to the new repository'}"
            exit 1
          fi
          echo "{'success':'Repository created successfully and code pushed'}"
