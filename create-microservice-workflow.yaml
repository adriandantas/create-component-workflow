apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: create-microservice-automation-
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: service-name
      - name: owner-username
      - name: team
      - name: description
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
  templates:

    - name: main
      steps:
        - - name: validate-input
            template: validate-input
            arguments:
              parameters:
                - name: service-name
                  value: "{{workflow.parameters.service-name}}"
                - name: owner-username
                  value: "{{workflow.parameters.owner-username}}"
                - name: team
                  value: "{{workflow.parameters.team}}"
                - name: description
                  value: "{{workflow.parameters.description}}"

        - - name: template-checkout
            template: template-checkout

        - - name: microservice-scaffolding
            template: microservice-scaffolding

        - - name: debug-workspace
            template: debug-workspace

    - name: validate-input
      inputs:
        parameters:
          - name: service-name
          - name: owner-username
          - name: team
          - name: description
      container:
        image: adriandantas/step_validator:1.0.2
        args: [
          "--service-name", "{{inputs.parameters.service-name}}",
          "--owner-username", "{{inputs.parameters.owner-username}}",
          "--team", "{{inputs.parameters.team}}",
          "--description", "{{inputs.parameters.description}}"
        ]
        volumeMounts:
          - name: workspace
            mountPath: /workspace
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: /workspace/result.json
            globalName: service-params

    - name: template-checkout
      script:
        image: alpine/git
        command: [ "/bin/sh", "-c" ]
        env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: git-token
                key: token
        args:
          - >
            git clone --single-branch -b main https://x-access-token:$GIT_TOKEN@github.com/adriandantas/sample-quarkus-template.git /workspace/sample-quarkus-template;
            echo 'Repository cloned successfully';
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: microservice-scaffolding
      container:
        image: adriandantas/cookiecutter:2.3.0
        args: [
          "https://github.com/audreyfeldroy/cookiecutter-pypackage.git",
          "-o", "/workspace",
          "--no-input"
        ]
        volumeMounts:
        - name: workspace
          mountPath: /workspace

    - name: debug-workspace
      script:
        image: alpine/git # or any image with git installed
        command: [ "/bin/sh", "-c" ]
        args:
          - >
            ls -F /workspace > /workspace/ws-dump.txt;
            ls -F /workspace/sample-quarkus-template > /workspace/quarkus-dump.txt;
            ls -F /workspace/python_boilerplate > /workspace/cookiecutter-dump.txt;
        volumeMounts:
          - name: workspace
            mountPath: /workspace
      outputs:
        parameters:
          - name: ws-dump
            valueFrom:
              path: /workspace/ws-dump.txt
          - name: quarkus-dump
            valueFrom:
              path: /workspace/quarkus-dump.txt
          - name: cookiecutter-dump
            valueFrom:
              path: /workspace/cookiecutter-dump.txt
