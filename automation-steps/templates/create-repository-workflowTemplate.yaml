apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: create-repository-step
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: user-name
      - name: repo-name
      - name: workspace-dir
  workflowMetadata:
    labels:
      automationType: step
  templates:
    - name: main
      inputs:
        parameters:
          - name: user-name
          - name: repo-name
          - name: workspace-dir
      script:
        image: debian:bullseye
        volumeMounts:
          - name: workspace
            mountPath: /workspace
        env:
          - name: USER_NAME
            value: "{{ "{{inputs.parameters.user-name}}" }}"
          - name: REPO_NAME
            value: "{{ "{{inputs.parameters.repo-name}}" }}"
          - name: WORKSPACE_DIR
            value: "{{ "{{inputs.parameters.workspace-dir}}" }}"
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-token
                key: token
        command: [ bash ]
        source: |
          #!/bin/bash
          apt-get update && apt-get install -y git jq curl
          workspace_dir="${WORKSPACE_DIR}"
          git_token="${GIT_TOKEN}"
          user_name="${USER_NAME}"
          repo_name="${REPO_NAME,,}"

          # Validate environment variables
          errors=""
          if [ -z "$workspace_dir" ]; then
          errors+="WORKSPACE_DIR is not set; "
          fi
          if [ -z "$git_token" ]; then
          errors+="GIT_TOKEN is not set; "
          fi
          if [ -z "$user_name" ]; then
          errors+="USER_NAME is not set; "
          fi
          if [ -z "$repo_name" ]; then
          errors+="REPO_NAME is not set; "
          fi

          if [ ! -z "$errors" ]; then
          echo "{'error':'validation error','message':'$errors'}"
          exit 1
          fi

          clone_url=""

          # Check if GitHub repository exists
          response=$(curl -s -u $user_name:$git_token \
          https://api.github.com/repos/$user_name/$repo_name)

          if [ "$(echo $response | jq -r '.message')" == "Not Found" ]; then
          # Create GitHub repository using API
          echo "Creating repository 'https://api.github.com/repos/$user_name/$repo_name' on GitHub"
          response=$(curl -s -u $user_name:$git_token \
          -X POST \
          -H "Content-Type: application/json" \
          -d "{\"name\": \"$repo_name\", \"private\": false}" \
          https://api.github.com/user/repos)

          if [ "$(echo $response | jq -r '.full_name')" != "$user_name/$repo_name" ]; then
          echo "{'error':'runtime error','message':'Failed to create repository on GitHub'}"
          exit 1
          fi
          echo "Repository created successfully"
          else
          clone_url=$(echo $response | jq -r '.clone_url')
          echo Repository \'$clone_url\' already exists
          fi

          # Get repository path
          repo_path="${workspace_dir}/${repo_name}"
          if [ ! -d "$repo_path" ]; then
          echo "{'error':'runtime error','message':'The directory \"$repo_path\" does not exist'}"
          exit 1
          fi

          git config --global user.name "Adrian Dantas"
          git config --global user.email "adrian.dantas@gmail.com"

          # Initialize local repository
          git init "$repo_path"
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to init new repository'}"
            exit 1
          fi

          git -C "$repo_path" branch -m main
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to set main branch'}"
            exit 1
          fi

          git -C "$repo_path" add .
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to add files to commit'}"
            exit 1
          fi

          git -C "$repo_path" commit -m 'Initial commit.'
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to add files to commit'}"
            exit 1
          fi

          repo_url="https://$user_name:$git_token@github.com/$user_name/$repo_name.git"
          git -C "$repo_path" remote add origin "$repo_url"
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to set remote origin'}"
            exit 1
          fi

          # Upload local repository
          git -C "$repo_path" push origin main
          if [ $? -ne 0 ]; then
            echo "{'error':'runtime error','message':'Failed to push code to the new repository'}"
            exit 1
          fi
          echo "{'success':'Repository created successfully and code pushed'}"

